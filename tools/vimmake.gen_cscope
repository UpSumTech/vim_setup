#!/usr/bin/env bash
set -e
set -o pipefail

#########################################################
################### Helper functions ####################
#########################################################
export PID="$$" # Get parent pid so that you can kill the main proc from subshells
die() {
  echo >&2 "Error : $@"
  kill -s TERM $PID
  exit 1
}

wrap_around_dir_change() {
  local fn="$1"
  shift 1
  pushd .
  eval "$(declare -F "$fn")" "$@"
  popd
}

#########################################################
################### High level fn #######################
#########################################################
gen_cscope() {
  cd "$VIM_CWD"
  CSCOPE_DIR="$VIM_CWD/cscope"
  [[ ! -d "$CSCOPE_DIR" ]] && mkdir -p "$CSCOPE_DIR"
  find "$VIM_CWD" -name '*.[ch]' \
    -o -name '*.java' \
    -o -name '*properties' \
    -o -name '*.cpp' \
    -o -name '*.cc' \
    -o -name '*.hpp' \
    -o -name '*.py' \
    -o -name '*.groovy' \
    -o -name '*.js' \
    -o -name '*.jsx' \
    -o -name '*.scala' \
    -o -name '*.go' \
    -o -name '*.json' \
    -o -name '*.rb' \
    ! -path "./.git/*" \
    ! -path "./vendor/*" \
    ! -path "./node_modules/*" \
    ! -path "./temp/*" \
    > "$CSCOPE_DIR/cscope.files"
  cscope -b -i "$CSCOPE_DIR/cscope.files"
  export CSCOPE_DB="$CSCOPE_DIR/cscope.out"
}

#########################################################
###################### Entrypoint #######################
#########################################################
main() {
  wrap_around_dir_change gen_cscope
}

[[ "$BASH_SOURCE" == "$0" ]] && main "$@"
